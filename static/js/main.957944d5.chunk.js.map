{"version":3,"sources":["elements/StarshipItem.js","elements/MainContent.js","elements/MainMenu.js","pages/MainPage.js","elements/PersonsMenu.js","elements/PersonItem.js","elements/PersonsContent.js","pages/PersonsPage.js","elements/Clock.js","elements/Menu.js","pages/NotFound.js","elements/PlanetsItems.js","pages/PlanetsPage.js","App.js","serviceWorker.js","index.js"],"names":["StarshipItem","props","data","name","className","model","manufacturer","starship_class","MainContent","searchList","searchString","useState","starship","setStarship","useEffect","fetch","then","res","json","catch","err","console","error","length","MainMenu","setShipNumber","setSearchString","val","setVal","type","placeholder","onChange","e","target","value","onClick","parseInt","localStorage","removeItem","MainPage","shipNumber","getItem","searchArr","setSearchArr","results","map","item","key","toString","url","setItem","PersonMenu","setPersonId","PersonItem","starshipElements","starships","birth_year","gender","height","skin_color","PersonsContent","PersonsPage","setData","setSearchList","searchList2","setSearchList2","personId","api","setApi","personArr","starshipArr","concat","PersonsMenu","Clock","Date","toLocaleTimeString","time","setTime","timerId","setInterval","tick","clearInterval","Menu","location","useLocation","pathname","to","NotFound","PlanetsItem","orbital_period","rotation_period","PlanetsPage","page","setPage","planetsElements","planet","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","d","selected","containerClassName","subContainerClassName","activeClassName","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kMAyBeA,EAtBM,SAACC,GAAW,IAErBC,EAASD,EAATC,KAER,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMC,MAEF,yBAAKC,UAAU,aAAf,gBACWF,QADX,IACWA,OADX,EACWA,EAAMC,KAAK,6BADtB,iBAEYD,QAFZ,IAEYA,OAFZ,EAEYA,EAAMG,MAAM,6BAFxB,wBAGmBH,QAHnB,IAGmBA,OAHnB,EAGmBA,EAAMI,aAAa,6BAHtC,0BAIqBJ,QAJrB,IAIqBA,OAJrB,EAIqBA,EAAMK,eAAe,8BAK1C,yBAAKH,UAAU,cACX,yBAAKA,UAAU,gBAAf,wBCgCDI,EA7CK,SAACP,GAAW,IAEpBC,EAAmCD,EAAnCC,KAAMO,EAA6BR,EAA7BQ,WAAYC,EAAiBT,EAAjBS,aAFC,EAGKC,mBAAS,IAHd,mBAGpBC,EAHoB,KAGVC,EAHU,KAmB3B,OAdAC,qBAAU,WACc,kBAATZ,EACPa,MAAM,GAAD,OATL,yBASK,qBAAoBb,EAApB,MACAc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIJ,EAAYI,MACxBE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MACT,kBAATlB,GACda,MAAMb,GACDc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIJ,EAAYI,MACxBE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAErC,CAAClB,IAEAQ,EACID,EAAWc,OAAS,EAEhB,yBAAKnB,UAAU,gBACX,4BACKK,IAOT,yBAAKL,UAAU,gBACX,kDAMR,kBAAC,EAAD,CACIF,KAAMU,KCZPY,EA7BE,SAACvB,GAAW,IAEnBwB,EAAiDxB,EAAjDwB,cAAef,EAAkCT,EAAlCS,aAAcgB,EAAoBzB,EAApByB,gBAFX,EAGJf,mBAAS,GAHL,mBAGnBgB,EAHmB,KAGdC,EAHc,KAKxB,OACI,yBAAKxB,UAAU,aACX,2BACIyB,KAAK,SACLC,YAAY,oBACZC,SAAU,SAACC,GAAD,OAAOJ,EAAOI,EAAEC,OAAOC,UAErC,2BAAOL,KAAK,SAASK,MAAM,OAAOC,QAAS,WAAQV,EAAcW,SAAST,OAC1E,2BACIvB,UAAU,kBACVyB,KAAK,OACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAON,EAAgBM,EAAEC,OAAOC,QAC1CA,MAAOxB,IAEX,2BACIN,UAAU,kBACVyB,KAAK,SACLK,MAAM,QACNC,QAAS,WAAQE,aAAaC,WAAW,eAAgBZ,EAAgB,SCmB1Ea,EA1CE,WAAO,IAAD,EAEiB5B,mBAAS,GAF1B,mBAEZ6B,EAFY,KAEAf,EAFA,OAGqBd,mBAAS0B,aAAaI,QAAQ,gBAAkB,IAHrE,mBAGZ/B,EAHY,KAGEgB,EAHF,OAIef,mBAAS,IAJxB,mBAIZ+B,EAJY,KAIDC,EAJC,KAYnB7B,qBAAU,WACNC,MAAM,2CAAD,OAA4CL,IAC5CM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI0B,EAAa1B,EAAI2B,YAC7BzB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QACjC,CAACV,IAEJ,IAAID,EAAaiC,EACZG,KAAI,SAAAC,GAAI,OAAI,wBAAIC,IAAKD,EAAK3C,KAAK6C,WAAYb,QAAS,kBAdrCc,EAcsDH,EAAKG,IAb3ExB,EAAcwB,GACdZ,aAAaa,QAAQ,cAAcxC,QACnCgB,EAAgB,IAHD,IAACuB,IAeXH,EAAK3C,SAGd,OACI,yBAAKC,UAAU,aACX,kBAAC,EAAD,CACIqB,cAAeA,EACff,aAAcA,EACdgB,gBAAiBA,IAErB,yBAAKtB,UAAU,gBACX,kBAAC,EAAD,CACIF,KAAMsC,EACN/B,WAAYA,EACZC,aAAcA,O,QCXnByC,EA1BI,SAAClD,GAAW,IAEnByB,EAA+CzB,EAA/CyB,gBAAiBhB,EAA8BT,EAA9BS,aAAc0C,EAAgBnD,EAAhBmD,YAFb,EAGJzC,mBAAS,GAHL,mBAGnBgB,EAHmB,KAGdC,EAHc,KAK1B,OACI,6BACI,yBAAKxB,UAAU,aACX,2BACIyB,KAAK,SACLC,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAOJ,EAAOI,EAAEC,OAAOC,UAErC,2BAAOL,KAAK,SAASK,MAAM,OAAOC,QAAS,WAAQiB,EAAYzB,MAC/D,2BACIvB,UAAU,kBACVyB,KAAK,OACLC,YAAY,SACZC,SAAU,SAACC,GAAD,OAAON,EAAgBM,EAAEC,OAAOC,QAC1CA,MAAOxB,OCGZ2C,EArBI,SAACpD,GAAW,IAAD,YAEtBqD,EAAgB,UAAGrD,EAAMC,YAAT,aAAG,EAAYqD,UAC9BV,KAAI,SAAAjC,GAAQ,OAAI,kBAAC,EAAD,CAAamC,IAAKnC,EAASoC,WAAY9C,KAAMU,OAElE,OACI,6BACI,gDACWX,EAAMC,YADjB,aACW,EAAYC,KAAK,6BAD5B,yBAEiBF,EAAMC,YAFvB,aAEiB,EAAYsD,WAAW,6BAFxC,qBAGavD,EAAMC,YAHnB,aAGa,EAAYuD,OAAO,6BAHhC,qBAIaxD,EAAMC,YAJnB,aAIa,EAAYwD,OAAO,6BAJhC,yBAKiBzD,EAAMC,YALvB,aAKiB,EAAYyD,WAAW,8BAExC,yBAAKvD,UAAU,cACVkD,KCYFM,EA3BQ,SAAC3D,GAAW,IAEvByC,EAAkCzC,EAAlCyC,UAAWhC,EAAuBT,EAAvBS,aAAcR,EAASD,EAATC,KAEjC,MAAqB,KAAjBQ,EAEI,yBAAKN,UAAU,gBACVsC,IAIT,OAAIxC,QAAJ,IAAIA,OAAJ,EAAIA,EAAMC,MAEF,6BACI,kBAAC,EAAD,CAAYD,KAAMA,KAKtB,yBAAKE,UAAU,wBACX,mDCsDLyD,EAzEK,WAAO,IAAD,EAEElD,mBAAS,MAFX,mBAEfT,EAFe,KAET4D,EAFS,OAGcnD,mBAAS,IAHvB,mBAGfF,EAHe,KAGHsD,EAHG,OAIgBpD,mBAAS,IAJzB,mBAIfqD,EAJe,KAIFC,EAJE,OAKkBtD,mBAAS,IAL3B,mBAKfD,EALe,KAKDgB,EALC,OAMUf,mBAAS,GANnB,mBAMfuD,EANe,KAMLd,EANK,OAOAzC,mBAAS,IAPT,mBAOfwD,EAPe,KAOVC,EAPU,KAelBC,EAAS,YAAO5D,GAChB6D,EAAW,YAAON,GAIhBtB,EAFI2B,EAAUE,OAAOD,GAGtBzB,KAAI,SAAAC,GAAI,OACJ,wBAAIC,IAAKD,EAAK3C,KAAMgC,QAAS,kBAbbc,EAamCH,EAAKG,IAZ7DmB,EAAOnB,GACPZ,aAAaa,QAAQ,eAAgBxC,QACrCgB,EAAgB,IAHI,IAACuB,IAcZH,EAAK3C,SA6BlB,OAzBAW,qBAAU,WACFuB,aAAaI,QAAQ,kBACrBf,EAAgBW,aAAaI,QAAQ,iBACrCJ,aAAaC,WAAW,mBAE7B,IAEHxB,qBAAU,WACNC,MAAM,wCAAD,OAAyCL,IACzCM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI8C,EAAc9C,EAAI2B,YAC9BzB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAChCL,MAAM,2CAAD,OAA4CL,IAC5CM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIgD,EAAehD,EAAI2B,YAC/BzB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QACjC,CAACV,IAEJI,qBAAU,WACNC,MAAMoD,GAAG,uCAAoCD,EAApC,MACJlD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI6C,EAAQ7C,MACpBE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QACjC,CAAC8C,EAAUC,IAGV,yBAAK/D,UAAU,aACX,kBAACoE,EAAD,CACIT,cAAeA,EACfrC,gBAAiBA,EACjBhB,aAAcA,EACdoD,QAASA,EACTV,YAAaA,IAEjB,yBAAKhD,UAAU,gBACX,kBAAC,EAAD,CACIK,WAAYA,EACZC,aAAcA,EACdR,KAAMA,EACNwC,UAAWA,OCThB+B,EAzBD,WAAO,IAAD,EAEQ9D,oBAAS,IAAI+D,MAAOC,sBAF5B,mBAETC,EAFS,KAEHC,EAFG,KAIhB/D,qBAAU,WACN,IAAIgE,EAAUC,aACV,kBAAMC,MACN,KAEJ,OAAO,WACHC,cAAcH,MAEnB,CAACF,IAEJ,IAAMI,EAAO,WACTH,GAAQ,IAAIH,MAAOC,uBAGvB,OACI,yBAAKvE,UAAU,SACX,4BAAKwE,K,cCnCFM,EAdF,WAET,IAAIC,EAAWC,cAEf,OACI,yBAAKhF,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAMA,UAAiC,MAAtB+E,EAASE,SAAmB,SAAW,GAAIC,GAAG,KAA/D,QACA,kBAAC,IAAD,CAAMlF,UAAiC,aAAtB+E,EAASE,SAA0B,SAAW,GAAIC,GAAG,YAAtE,WACA,kBAAC,IAAD,CAAMlF,UAAiC,aAAtB+E,EAASE,SAA0B,SAAW,GAAIC,GAAG,YAAtE,aCFGC,EAXE,WACb,OACI,yBAAKnF,UAAU,iBACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aAAf,SCOGoF,EAbK,SAACvF,GACjB,OACI,6BACI,qCACWA,EAAME,KADjB,qBAEqBF,EAAMwF,eAF3B,sBAGsBxF,EAAMyF,gBAH5B,KAKA,+B,iBCuEGC,EA5EK,WAAO,IAAD,EAEEhF,mBAAS,IAFX,mBAEfT,EAFe,KAET4D,EAFS,OAGEnD,mBAAS,GAHX,mBAGfiF,EAHe,KAGTC,EAHS,KAUtB/E,qBAAU,WACNC,MAAM,uCAAD,OAAwC6E,IACxC5E,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI6C,EAAQ7C,EAAI2B,YACxBzB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QACjC,CAACwE,IAEJ,IAAIE,EAAkB5F,EACjB2C,KAAI,SAAAkD,GAAM,OAAI,kBAAC,EAAD,CAAahD,IAAKgD,EAAO5F,KAAMA,KAAM4F,EAAO5F,KAAMuF,gBAAiBK,EAAOL,gBAAiBD,eAAgBM,EAAON,oBAcrI,OACI,yBAAKrF,UAAU,wBACX,yBAAKA,UAAU,aACX,4BACK0F,GAGL,kBAAC,IAAD,CACIE,cAAe,WACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBC,UAAW,EACXC,qBAAsB,GACtBC,mBAAoB,GACpBC,aA1CH,SAACC,GAAD,OAAOX,EAAQW,EAAEC,SAAW,IA2CzBC,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,cCXtBC,MA3Bf,WACE,OACE,yBAAKzG,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0G,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,MACA,kBAAC,EAAD,WCxBQC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3G,MAAK,SAAA4G,GACJA,EAAaC,gBAEd1G,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMwG,a","file":"static/js/main.957944d5.chunk.js","sourcesContent":["import React from 'react';\nimport './../App.css';\n\nconst StarshipItem = (props) => {\n\n    const { data } = props;\n\n    if (data?.name) {\n        return (\n            <div className=\"text-wrap\">\n                Name: {data?.name}<br />\n                Model: {data?.model}<br />\n                Manufacturer: {data?.manufacturer}<br />\n                Starship class: {data?.starship_class}<br />\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"noStarShip\">\n                <div className=\"noStarShipIn\">Starship not found</div>\n            </div>\n        )\n    }\n}\n\nexport default StarshipItem;","import React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport StarshipItem from './StarshipItem'\n\nconst api = 'https://swapi.dev/api/'\n\nconst MainContent = (props) => {\n\n    const { data, searchList, searchString } = props;\n    const [starship, setStarship] = useState({})\n\n    useEffect(() => {\n        if (typeof data === \"number\") {\n            fetch(`${api}starships/${data}/`)\n                .then(res => res.json())\n                .then(res => setStarship(res))\n                .catch(err => console.error(err))\n        } else if (typeof data === \"string\") {\n            fetch(data)\n                .then(res => res.json())\n                .then(res => setStarship(res))\n                .catch(err => console.error(err))\n        }\n    }, [data])\n\n    if (searchString) {\n        if (searchList.length > 0) {\n            return (\n                <div className='search-block'>\n                    <ul>\n                        {searchList}\n                    </ul>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div className='search-block'>\n                    <>Not found</>\n                </div>\n            )\n        }\n    } else {\n        return (\n            <StarshipItem\n                data={starship}\n            />\n        )\n    }\n}\n\nexport default MainContent;","import React, { useState } from 'react';\nimport './../App.css';\n\n\nconst MainMenu = (props) => {\n\n    let { setShipNumber, searchString, setSearchString } = props;\n    let [val, setVal] = useState(0)\n\n    return (\n        <div className=\"main-menu\">\n            <input\n                type=\"number\"\n                placeholder=\"Enter ship number\"\n                onChange={(e) => setVal(e.target.value)}\n            />\n            <input type=\"submit\" value=\"Find\" onClick={() => { setShipNumber(parseInt(val)) }} />\n            <input\n                className=\"search-textarea\"\n                type='text'\n                placeholder='Search'\n                onChange={(e) => setSearchString(e.target.value)}\n                value={searchString}\n            />\n            <input\n                className=\"search-textarea\"\n                type='button'\n                value='Clear'\n                onClick={() => { localStorage.removeItem('swapiSearch'); setSearchString('') }} />\n        </div>\n    )\n}\n\nexport default MainMenu;","import React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport MainContent from '../elements/MainContent';\nimport MainMenu from './../elements/MainMenu';\n\nconst MainPage = () => {\n\n    const [shipNumber, setShipNumber] = useState(9);\n    const [searchString, setSearchString] = useState(localStorage.getItem('swapiSearch') || '');\n    const [searchArr, setSearchArr] = useState([]);\n\n    const selectItem = (url) => {\n        setShipNumber(url)\n        localStorage.setItem('swapiSearch',searchString)\n        setSearchString('')\n    }\n\n    useEffect(() => {\n        fetch(`https://swapi.dev/api/starships/?search=${searchString}`)\n            .then(res => res.json())\n            .then(res => setSearchArr(res.results))\n            .catch(err => console.error(err))\n    }, [searchString])\n\n    let searchList = searchArr\n        .map(item => <li key={item.name.toString()} onClick={() => selectItem(item.url)}>\n            {item.name}\n        </li>)\n\n    return (\n        <div className=\"main-page\">\n            <MainMenu\n                setShipNumber={setShipNumber}\n                searchString={searchString}\n                setSearchString={setSearchString}\n            />\n            <div className=\"content-wrap\">\n                <MainContent\n                    data={shipNumber}\n                    searchList={searchList}\n                    searchString={searchString}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default MainPage;","import React, { useState } from 'react';\nimport './../App.css';\n\nconst PersonMenu = (props) => {\n\n    const { setSearchString, searchString, setPersonId } = props;\n    const [val, setVal] = useState(0)\n\n    return (\n        <div>\n            <div className=\"main-menu\">\n                <input\n                    type=\"number\"\n                    placeholder=\"Enter person id\"\n                    onChange={(e) => setVal(e.target.value)}\n                />\n                <input type=\"submit\" value=\"Find\" onClick={() => { setPersonId(val) }} />\n                <input\n                    className=\"search-textarea\"\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    onChange={(e) => setSearchString(e.target.value)}\n                    value={searchString}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default PersonMenu;","import React from 'react';\nimport './../App.css';\nimport MainContent from './MainContent';\n\nconst PersonItem = (props) => {\n    \n    let starshipElements = props.data?.starships\n        .map(starship => <MainContent key={starship.toString()} data={starship} />)\n\n    return (\n        <div>\n            <div>\n                Name: {props.data?.name}<br />\n                Birth date: {props.data?.birth_year}<br />\n                Gender: {props.data?.gender}<br />\n                Height: {props.data?.height}<br />\n                Skin color: {props.data?.skin_color}<br />\n            </div>\n            <div className=\"personShip\">\n                {starshipElements}\n            </div>\n        </div>\n    )\n}\n\nexport default PersonItem;","import React from 'react';\nimport './../App.css';\nimport PersonItem from './PersonItem'\n\nconst PersonsContent = (props) => {\n\n    const { searchArr, searchString, data } = props;\n    \n    if (searchString !== '') {\n        return (\n            <div className='search-block'>\n                {searchArr}\n            </div>\n        )\n    } else {\n        if (data?.name) {\n            return (\n                <div>\n                    <PersonItem data={data} />\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"noStarShip text-wrap\">\n                    <div>Person not found</div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default PersonsContent;\n","import React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport PersonsMenu from './../elements/PersonsMenu';\nimport PersonsContent from './../elements/PersonsContent';\n\nconst PersonsPage = () => {\n\n    const [data, setData] = useState(null);\n    const [searchList, setSearchList] = useState([]);\n    const [searchList2, setSearchList2] = useState([]);\n    const [searchString, setSearchString] = useState('');\n    const [personId, setPersonId] = useState(1);\n    const [api, setApi] = useState('');\n\n    const searchingPerson = (url) => {\n        setApi(url)\n        localStorage.setItem('searchString', searchString)\n        setSearchString('')\n    };\n\n    let personArr = [...searchList]\n    let starshipArr = [...searchList2]\n\n    let arr = personArr.concat(starshipArr)\n\n    const searchArr = arr\n        .map(item =>\n            (<li key={item.name} onClick={() => searchingPerson(item.url)}>\n                {item.name}\n            </li>)\n        );\n\n    useEffect(() => {\n        if (localStorage.getItem(\"searchString\")) {\n            setSearchString(localStorage.getItem(\"searchString\"))\n            localStorage.removeItem(\"searchString\")\n        }\n    }, [])\n\n    useEffect(() => {\n        fetch(`https://swapi.dev/api/people/?search=${searchString}`)\n            .then(res => res.json())\n            .then(res => setSearchList(res.results))\n            .catch(err => console.error(err))\n        fetch(`https://swapi.dev/api/starships/?search=${searchString}`)\n            .then(res => res.json())\n            .then(res => setSearchList2(res.results))\n            .catch(err => console.error(err))\n    }, [searchString])\n\n    useEffect(() => {\n        fetch(api || `https://swapi.dev/api/people/${personId}/`)\n            .then(res => res.json())\n            .then(res => setData(res))\n            .catch(err => console.error(err))\n    }, [personId, api])\n\n    return (\n        <div className=\"main-page\">\n            <PersonsMenu\n                setSearchList={setSearchList}\n                setSearchString={setSearchString}\n                searchString={searchString}\n                setData={setData}\n                setPersonId={setPersonId}\n            />\n            <div className=\"content-wrap\">\n                <PersonsContent\n                    searchList={searchList}\n                    searchString={searchString}\n                    data={data}\n                    searchArr={searchArr}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default PersonsPage;","import React, { useState, useEffect } from 'react';\nimport './../App.css';\n\n// class Clock extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { date: new Date() };\n//     }\n\n//     componentDidMount() {\n//         this.timerID = setInterval(\n//             () => this.tick(),\n//             1000\n//         );\n//     }\n\n//     componentWillUnmount() {\n//         clearInterval(this.timerID)\n//     }\n\n//     tick() {\n//         this.setState({\n//             date: new Date()\n//         });\n//     }\n\n//     render() {\n// return (\n//     <div>\n//         <h2>Сейчас {this.state.date.toLocaleTimeString()}.</h2>\n//     </div>\n// );\n//     }\n// }\n\n// export default Clock;\n\nconst Clock = () => {\n\n    const [time, setTime] = useState(new Date().toLocaleTimeString())\n    \n    useEffect(() => {\n        let timerId = setInterval(\n            () => tick(),\n            1000\n        )\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [time])\n\n    const tick = () => {\n        setTime(new Date().toLocaleTimeString())\n    }\n\n    return (\n        <div className='clock'>\n            <h1>{time}</h1>\n        </div>\n    );\n}\n\nexport default Clock;","import React from 'react';\nimport './../App.css';\nimport Clock from './Clock'\nimport {\n    Link,\n    useLocation\n} from \"react-router-dom\";\n\nconst Menu = () => {\n\n    let location = useLocation();\n\n    return (\n        <div className=\"menu\">\n            <Clock />\n            <Link className={location.pathname === \"/\" ? \"active\" : \"\"} to=\"/\">Main</Link>\n            <Link className={location.pathname === \"/persons\" ? \"active\" : \"\"} to=\"/persons\">Persons</Link>\n            <Link className={location.pathname === \"/planets\" ? \"active\" : \"\"} to=\"/planets\">Planets</Link>\n        </div>\n    )\n}\n\nexport default Menu;","import React from 'react';\nimport './../App.css';\nimport Menu from './../elements/Menu'\n\nconst NotFound = () => {\n    return (\n        <div className=\"content-wrap \">\n            <Menu />\n            <div className=\"text-wrap\">\n                404\n            </div>\n        </div>\n    )\n}\n\nexport default NotFound;","import React from 'react';\n\nconst PlanetsItem = (props) => {\n    return (\n        <div>\n            <li>\n                Name: {props.name},\n                Orbital period: {props.orbital_period},\n                Rotation period: {props.rotation_period};\n            </li>\n            <br />\n        </div>\n    )\n}\n\nexport default PlanetsItem;","import React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport PlanetsItem from './../elements/PlanetsItems';\nimport ReactPaginate from 'react-paginate'\n\nconst PlanetsPage = () => {\n\n    const [data, setData] = useState([]);\n    const [page, setPage] = useState(1)\n\n    let crutch = (d) => setPage(d.selected + 1);\n\n    // для пагинации без библиотеки\n    // const apiFunc = (btnNum) => setApi(`https://swapi.dev/api/planets/?page=${btnNum}`)\n\n    useEffect(() => {\n        fetch(`https://swapi.dev/api/planets/?page=${page}`)\n            .then(res => res.json())\n            .then(res => setData(res.results))\n            .catch(err => console.error(err))\n    }, [page])\n\n    let planetsElements = data\n        .map(planet => <PlanetsItem key={planet.name} name={planet.name} rotation_period={planet.rotation_period} orbital_period={planet.orbital_period}/>)\n\n    // каждый второй элемент на цикле for\n    // let newPlanetsArr = []\n\n    // for (let i = 0; i < planetsElements.length; i++) {\n    //     if (i % 2) {\n    //         newPlanetsArr.push(planetsElements[i]) \n    //     }\n    // }\n\n    // каждый второй елемент на методе .filter()\n    // let newPlanetsArr = planetsElements.filter((item, index) => index % 2 )\n\n    return (\n        <div className=\"content-wrap planets\">\n            <div className=\"text-wrap\">\n                <ul>\n                    {planetsElements}\n                </ul>\n                \n                <ReactPaginate\n                    previousLabel={'previous'}\n                    nextLabel={'next'}\n                    breakLabel={'...'}\n                    breakClassName={'break-me'}\n                    pageCount={6}\n                    marginPagesDisplayed={10}\n                    pageRangeDisplayed={10}\n                    onPageChange={crutch}\n                    containerClassName={'pagination'}\n                    subContainerClassName={'pages pagination'}\n                    activeClassName={'active'}\n                />\n\n                {/* <button onClick={() => apiFunc(1)}>\n                    1\n                </button>\n                <button onClick={() => apiFunc(2)}>\n                    2\n                </button>\n                <button onClick={() => apiFunc(3)}>\n                    3\n                </button>\n                <button onClick={() => apiFunc(4)}>\n                    4\n                </button>\n                <button onClick={() => apiFunc(5)}>\n                    5\n                </button>\n                <button onClick={() => apiFunc(6)}>\n                    6\n                </button> */}\n            </div>\n        </div>\n    )\n}\n\nexport default PlanetsPage;","import React from 'react';\nimport './App.css';\nimport MainPage from './pages/MainPage';\nimport PersonPage from './pages/PersonsPage';\nimport NotFound from './pages/NotFound';\nimport Menu from './elements/Menu'\nimport PlanetsPage from './pages/PlanetsPage'\nimport {\n  BrowserRouter as Router,\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"mainWrapper\">\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <Menu />\n            <MainPage />\n          </Route>\n          <Route path=\"/persons\">\n            <Menu />\n            <PersonPage />\n          </Route>\n          <Route path=\"/planets\">\n            <Menu />\n            <PlanetsPage />\n          </Route>\n          <Route path=\"*\">\n            <Menu />\n            <NotFound />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}